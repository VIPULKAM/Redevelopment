import streamlit as st
import matplotlib.pyplot as plt

# Set page configuration FIRST
st.set_page_config(
    page_title="‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§®‡§´‡§æ ‡§ï‡•Ö‡§≤‡•ç‡§ï‡•ç‡§Ø‡•Å‡§≤‡•á‡§ü‡§∞",
    page_icon="üè¢",
    layout="wide"
)

# Then add CSS for proper Marathi font rendering
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Devanagari:wght@400;700&display=swap');
    
    html, body, [class*="st-"] {
        font-family: 'Noto Sans Devanagari', sans-serif;
    }
</style>
""", unsafe_allow_html=True)

# Region names in Marathi
REGION_NAMES = {
    "Mumbai": "‡§Æ‡•Å‡§Ç‡§¨‡§à",
    "Navi Mumbai": "‡§®‡§µ‡•Ä ‡§Æ‡•Å‡§Ç‡§¨‡§à",
    "Thane": "‡§†‡§æ‡§£‡•á",
    "Pune": "‡§™‡•Å‡§£‡•á",
    "Nagpur": "‡§®‡§æ‡§ó‡§™‡•Ç‡§∞",
    "Nashik": "‡§®‡§æ‡§∂‡§ø‡§ï"
}

# Get English key from Marathi region name
def get_english_region_key(marathi_name):
    for eng_key, mar_name in REGION_NAMES.items():
        if mar_name == marathi_name:
            return eng_key
    return marathi_name  # Return original if not found

# ======================
# Region Configuration
# ======================
REGION_CONFIG = {
    "Mumbai": {
        "fsi_rules": {
            "residential": 2.5, 
            "commercial": 5.0, 
            "tdr_multiplier": 2.5
        },
        "premium_rates": {
            "construction": 3000, 
            "fungible_fsi": 0.35
        },
        "bonuses": {
            "green_building": 0.07, 
            "self_redev": 0.10, 
            "ancillary": 0.60
        },
        "parking": {
            "redev_reduction": 0.20, 
            "car_lift_threshold": 2000
        },
        "tdr_rates": {
            "residential": 0.4, 
            "commercial": 0.3
        },
        "stamp_duty": {
            "builder": 0.06,  # 6% for builder redevelopment
            "self": 1000      # Flat Rs.1000 per unit for self-redevelopment
        },
        "gst": {
            "builder": 0.05,  # 5% for builder redevelopment
            "self": 0.0       # 0% for self-redevelopment
        }
    },
    "Navi Mumbai": {
        "fsi_rules": {
            "residential": 2.0, 
            "commercial": 4.0, 
            "tdr_multiplier": 2.0
        },
        "premium_rates": {
            "construction": 2800, 
            "fungible_fsi": 0.33
        },
        "bonuses": {
            "green_building": 0.06, 
            "self_redev": 0.12, 
            "ancillary": 0.50
        },
        "parking": {
            "redev_reduction": 0.25, 
            "car_lift_threshold": 1800
        },
        "tdr_rates": {
            "residential": 0.38, 
            "commercial": 0.28
        },
        "stamp_duty": {
            "builder": 0.06,
            "self": 1000
        },
        "gst": {
            "builder": 0.05,
            "self": 0.0
        }
    },
    "Thane": {
        "fsi_rules": {
            "residential": 3.0, 
            "commercial": 4.0, 
            "tdr_multiplier": 2.0
        },
        "premium_rates": {
            "construction": 2500,
            "fungible_fsi": 0.30
        },
        "bonuses": {
            "green_building": 0.05,
            "self_redev": 0.15,
            "ancillary": 0.50
        },
        "parking": {
            "redev_reduction": 0.30,
            "car_lift_threshold": 1500
        },
        "tdr_rates": {
            "residential": 0.35, 
            "commercial": 0.25
        },
        "stamp_duty": {
            "builder": 0.06,
            "self": 1000
        },
        "gst": {
            "builder": 0.05,
            "self": 0.0
        }
    },
    "Pune": {
        "fsi_rules": {
            "residential": 1.75, 
            "commercial": 3.0, 
            "tdr_multiplier": 1.8
        },
        "premium_rates": {
            "construction": 2700, 
            "fungible_fsi": 0.28
        },
        "bonuses": {
            "green_building": 0.05,
            "self_redev": 0.12,
            "ancillary": 0.45
        },
        "parking": {
            "redev_reduction": 0.25,
            "car_lift_threshold": 1800
        },
        "tdr_rates": {
            "residential": 0.35, 
            "commercial": 0.25
        },
        "stamp_duty": {
            "builder": 0.06,
            "self": 1000
        },
        "gst": {
            "builder": 0.05,
            "self": 0.0
        }
    },
    "Nagpur": {
        "fsi_rules": {
            "residential": 1.5, 
            "commercial": 2.5, 
            "tdr_multiplier": 1.5
        },
        "premium_rates": {
            "construction": 2200, 
            "fungible_fsi": 0.25
        },
        "bonuses": {
            "green_building": 0.05,
            "self_redev": 0.10,
            "ancillary": 0.40
        },
        "parking": {
            "redev_reduction": 0.20,
            "car_lift_threshold": 1500
        },
        "tdr_rates": {
            "residential": 0.30, 
            "commercial": 0.20
        },
        "stamp_duty": {
            "builder": 0.06,
            "self": 1000
        },
        "gst": {
            "builder": 0.05,
            "self": 0.0
        }
    },
    "Nashik": {
        "fsi_rules": {
            "residential": 1.6, 
            "commercial": 2.8, 
            "tdr_multiplier": 1.6
        },
        "premium_rates": {
            "construction": 2300, 
            "fungible_fsi": 0.26
        },
        "bonuses": {
            "green_building": 0.05,
            "self_redev": 0.10,
            "ancillary": 0.40
        },
        "parking": {
            "redev_reduction": 0.20,
            "car_lift_threshold": 1600
        },
        "tdr_rates": {
            "residential": 0.32, 
            "commercial": 0.22
        },
        "stamp_duty": {
            "builder": 0.06,
            "self": 1000
        },
        "gst": {
            "builder": 0.05,
            "self": 0.0
        }
    }
}

def get_ready_reckoner_rate(region, year):
    """Get ready reckoner rate for region and year."""
    ready_reckoner_rates = {
        "Mumbai": {2022: 150000, 2023: 160000, 2024: 170000},
        "Navi Mumbai": {2022: 120000, 2023: 130000, 2024: 140000},
        "Thane": {2022: 100000, 2023: 110000, 2024: 120000},
        "Pune": {2022: 80000, 2023: 85000, 2024: 90000},
        "Nagpur": {2022: 60000, 2023: 65000, 2024: 70000},
        "Nashik": {2022: 70000, 2023: 75000, 2024: 80000}
    }
    return ready_reckoner_rates.get(region, {}).get(year, 0)

def format_currency(amount):
    """Format amount in Indian Rupees with commas."""
    if amount >= 10000000:  # Convert to crores
        return f"‚Çπ{amount/10000000:.2f} ‡§ï‡•ã‡§ü‡•Ä (‚Çπ{amount:,.2f})"
    elif amount >= 100000:  # Convert to lakhs
        return f"‚Çπ{amount/100000:.2f} ‡§≤‡§æ‡§ñ (‚Çπ{amount:,.2f})"
    else:
        return f"‚Çπ{amount:,.2f}"

def format_area(area, unit="sqft"):
    """Format area with commas and unit."""
    if unit == "sqft":
        unit = "‡§ö‡•å‡§∞‡§∏ ‡§´‡•Ç‡§ü"
    elif unit == "sqm":
        unit = "‡§ö‡•å‡§∞‡§∏ ‡§Æ‡•Ä‡§ü‡§∞"
    elif unit == "Guntha":
        unit = "‡§ó‡•Å‡§Ç‡§†‡§æ"
    return f"{area:,.2f} {unit}"

def calculate_profit(
        region,
        ready_reckoner_year,
        land_area_guntha,
        current_carpet_area_per_member,
        total_members,
        extra_carpet_percentage,
        fsi,
        fungible_fsi,
        construction_cost_per_sqft,
        market_rate_per_sqft,
        avg_new_flat_size,
        rent_per_month,
        rent_duration_months,
        relocation_cost_per_member,
        bank_interest,
        project_type,
        is_self_redevelopment,
        profit_sharing_with_developer,
        tdr_percentage=0.0
    ):
    """Calculate profit from redevelopment project with TDR support and tax considerations."""
    # Convert guntha to square meters (1 guntha = 101.17 sqm)
    land_area_sqm = land_area_guntha * 101.17
    
    # Get ready reckoner rate for the region and year
    ready_reckoner_rate = get_ready_reckoner_rate(region, ready_reckoner_year)
    
    # Calculate current carpet area
    total_current_carpet_area = current_carpet_area_per_member * total_members
    
    # Calculate offered carpet area (with extra percentage)
    total_offered_carpet_area = total_current_carpet_area * (1 + extra_carpet_percentage/100)
    
    # Convert to sqft (1 sqm = 10.764 sqft)
    land_area_sqft = land_area_sqm * 10.764
    
    # TDR Calculation
    tdr_factor = REGION_CONFIG[region]["tdr_rates"][project_type]
    tdr_multiplier = REGION_CONFIG[region]["fsi_rules"]["tdr_multiplier"]
    tdr_bonus = (tdr_percentage/100) * tdr_factor * fsi
    effective_fsi = fsi + tdr_bonus
    
    # Calculate buildable area with effective FSI
    total_buildable_area_sqft = land_area_sqft * effective_fsi
    
    # Calculate green building bonus
    green_bonus = total_buildable_area_sqft * REGION_CONFIG[region]["bonuses"]["green_building"]
    
    # Calculate self-redevelopment bonus if applicable
    self_redev_bonus = 0
    if is_self_redevelopment:
        self_redev_bonus = total_buildable_area_sqft * REGION_CONFIG[region]["bonuses"]["self_redev"]
    
    # Calculate total area with bonuses
    total_final_area = total_buildable_area_sqft + green_bonus + self_redev_bonus
    
    # Calculate builder sellable area
    builder_sellable_area = total_final_area - total_offered_carpet_area
    
    # Calculate premium cost
    premium_cost_per_sqm = ready_reckoner_rate * fungible_fsi
    premium_cost = land_area_sqm * premium_cost_per_sqm
    
    # Calculate TDR cost
    tdr_cost = 0
    if tdr_percentage > 0:
        tdr_cost = land_area_sqm * ready_reckoner_rate * (tdr_percentage/100) * tdr_factor
    
    # Calculate construction cost
    construction_cost = total_final_area * construction_cost_per_sqft
    
    # Calculate rent cost
    rent_cost = total_members * rent_per_month * rent_duration_months
    
    # Calculate relocation cost
    relocation_cost = total_members * relocation_cost_per_member
    
    # Calculate GST (only for builder redevelopment)
    gst_cost = 0
    if not is_self_redevelopment:
        gst_rate = REGION_CONFIG[region]["gst"]["builder"]
        gst_cost = construction_cost * gst_rate
    
    # Calculate stamp duty
    stamp_duty_cost = 0
    if is_self_redevelopment:
        # Flat rate per unit for self-redevelopment
        stamp_duty_cost = REGION_CONFIG[region]["stamp_duty"]["self"] * total_members
    else:
        # Percentage of project value for builder redevelopment
        stamp_duty_rate = REGION_CONFIG[region]["stamp_duty"]["builder"]
        # Apply stamp duty to the offered carpet area value (for members' agreements)
        member_area_value = total_offered_carpet_area * market_rate_per_sqft
        stamp_duty_cost = member_area_value * stamp_duty_rate
    
    # Calculate total cost (now with GST and stamp duty)
    total_cost = premium_cost + tdr_cost + construction_cost + rent_cost + relocation_cost + bank_interest + gst_cost + stamp_duty_cost
    
    # Calculate project value
    project_value = builder_sellable_area * market_rate_per_sqft
    
    # Calculate total profit
    total_profit = project_value - total_cost
    
    # Calculate profit distribution
    profit_sharing_percentage = profit_sharing_with_developer
    developer_profit = 0
    society_profit = total_profit
    
    # Handle loss scenario differently
    if total_profit < 0:
        # In case of loss, society bears all loss in self-redevelopment
        if not is_self_redevelopment:
            # In builder redevelopment with loss, the loss sharing would depend on the agreement
            # For simplicity, we're assuming the loss is shared according to the profit sharing ratio
            developer_profit = total_profit * (profit_sharing_percentage / 100)
            society_profit = total_profit - developer_profit
    else:
        # Normal profit distribution for profitable projects
        if not is_self_redevelopment:
            developer_profit = total_profit * (profit_sharing_percentage / 100)
            society_profit = total_profit - developer_profit
    
    # Calculate per member profit (handle zero members)
    per_member_profit = society_profit / max(1, total_members)  # Prevent division by zero
    
    # Calculate number of salable flats
    num_salable_flats = builder_sellable_area / avg_new_flat_size
    
    # Return results
    return {
        "region": region,
        "project_type": project_type,
        "is_self_redevelopment": is_self_redevelopment,
        "land_area_guntha": land_area_guntha,
        "land_area_sqm": land_area_sqm,
        "ready_reckoner_rate": ready_reckoner_rate,
        "fsi": fsi,
        "effective_fsi": effective_fsi,
        "tdr_percentage": tdr_percentage,
        "tdr_cost": tdr_cost,
        "fungible_fsi": fungible_fsi,
        "total_current_carpet_area": total_current_carpet_area,
        "total_offered_carpet_area": total_offered_carpet_area,
        "total_buildable_area_sqft": total_buildable_area_sqft,
        "green_bonus": green_bonus,
        "self_redev_bonus": self_redev_bonus,
        "total_final_area": total_final_area,
        "builder_sellable_area": builder_sellable_area,
        "premium_cost_per_sqm": premium_cost_per_sqm,
        "premium_cost": premium_cost,
        "construction_cost_per_sqft": construction_cost_per_sqft,
        "construction_cost": construction_cost,
        "rent_cost": rent_cost,
        "relocation_cost": relocation_cost,
        "bank_interest": bank_interest,
        "gst_cost": gst_cost,
        "stamp_duty_cost": stamp_duty_cost,
        "total_cost": total_cost,
        "market_rate_per_sqft": market_rate_per_sqft,
        "project_value": project_value,
        "total_profit": total_profit,
        "profit_sharing_percentage": profit_sharing_percentage,
        "developer_profit": developer_profit,
        "society_profit": society_profit,
        "per_member_profit": per_member_profit,
        "num_salable_flats": num_salable_flats
    }

# Title and description in Marathi
st.title("‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§®‡§´‡§æ ‡§ï‡•Ö‡§≤‡•ç‡§ï‡•ç‡§Ø‡•Å‡§≤‡•á‡§ü‡§∞")
st.markdown("""
    ‡§π‡§æ ‡§ï‡•Ö‡§≤‡•ç‡§ï‡•ç‡§Ø‡•Å‡§≤‡•á‡§ü‡§∞ ‡§ó‡•É‡§π‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§Ç‡§®‡§æ ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§™‡•à‡§≤‡•Ç‡§Ç‡§ö‡•á ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡§§‡•ã. 
    ‡§π‡•á ‡§®‡§´‡§æ, ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§®‡§ø‡§ß‡•Ä, ‡§Ü‡§£‡§ø ‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§¶‡§®‡§ø‡§ï‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§™‡§æ‡§∞‡§¶‡§∞‡•ç‡§∂‡§ï ‡§ó‡§£‡§®‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡•á.
""")

# Create two columns - one for inputs, one for results
col1, col2 = st.columns([1, 2])

# Input form in the first column
with col1:
    st.header("‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§§‡§™‡§∂‡•Ä‡§≤ ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ")
    
    # Location Parameters
    st.subheader("‡§∏‡•ç‡§•‡§æ‡§®")
    region_display = st.selectbox("‡§™‡•ç‡§∞‡§¶‡•á‡§∂", list(REGION_NAMES.values()))
    # Convert display name back to English key
    region = get_english_region_key(region_display)
    
    ready_reckoner_year = st.selectbox("‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§µ‡§∞‡•ç‡§∑", [2022, 2023, 2024])
    project_type_display = st.selectbox("‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞", ["‡§®‡§ø‡§µ‡§æ‡§∏‡•Ä", "‡§µ‡§æ‡§£‡§ø‡§ú‡•ç‡§Ø‡§ø‡§ï"])
    # Convert to English key
    if project_type_display == "‡§®‡§ø‡§µ‡§æ‡§∏‡•Ä":
        project_type = "residential"
    else:
        project_type = "commercial"
        
    redevelopment_type = st.radio(
        "‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞", 
        ["‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏", "‡§¨‡§ø‡§≤‡•ç‡§°‡§∞ ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏"]
    )
    is_self_redevelopment = (redevelopment_type == "‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏")
    
    # Land Parameters
    st.subheader("‡§ú‡§Æ‡•Ä‡§® ‡§Æ‡§æ‡§™‡§¶‡§Ç‡§°")
    land_area_guntha = st.number_input("‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§ó‡•Å‡§Ç‡§†‡§æ)", value=10.0, min_value=0.1)
    total_members = st.number_input("‡§∏‡§¶‡§∏‡•ç‡§Ø/‡§∏‡§¶‡§®‡§ø‡§ï‡§æ‡§Ç‡§ö‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ", value=40, min_value=1, step=1)
    carpet_area = st.number_input("‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡§æ‡§∞‡•ç‡§™‡•á‡§ü ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§ö‡•å‡§∞‡§∏ ‡§´‡•Ç‡§ü)", value=500.0, min_value=100.0)
    extra_percentage = st.number_input("‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ï‡§æ‡§∞‡•ç‡§™‡•á‡§ü ‡§ü‡§ï‡•ç‡§ï‡•á‡§µ‡§æ‡§∞‡•Ä", value=30.0, min_value=0.0)
    
    # Construction Parameters
    st.subheader("‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§Æ‡§æ‡§™‡§¶‡§Ç‡§°")
    
    # Base FSI
    default_fsi = REGION_CONFIG[region]["fsi_rules"][project_type]
    fsi = st.number_input("‡§Æ‡•Ç‡§≥ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø", value=float(default_fsi), min_value=0.1)
    
    # TDR Input
    tdr_percentage = st.number_input(
        "‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ü‡§ï‡•ç‡§ï‡•á‡§µ‡§æ‡§∞‡•Ä (0-100%)", 
        min_value=0.0, 
        max_value=100.0, 
        value=0.0
    )
    
    # Fungible FSI
    default_fungible = REGION_CONFIG[region]["premium_rates"]["fungible_fsi"]
    default_fungible_pct = default_fungible * 100
    fungible_input = st.number_input(
        "‡§´‡§Ç‡§ú‡§ø‡§¨‡§≤ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø ‡§ü‡§ï‡•ç‡§ï‡•á‡§µ‡§æ‡§∞‡•Ä (25-40%)", 
        value=float(default_fungible_pct),
        min_value=0.0,
        max_value=100.0
    )
    fungible_fsi = fungible_input / 100  # Convert to decimal
    
    # Cost parameters
    default_construction = REGION_CONFIG[region]["premium_rates"]["construction"]
    construction_cost = st.number_input(
        "‡§™‡•ç‡§∞‡§§‡§ø ‡§ö‡•å‡§∞‡§∏ ‡§´‡•Ç‡§ü ‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§ñ‡§∞‡•ç‡§ö (‚Çπ)", 
        value=float(default_construction),
        min_value=1000.0
    )
    
    market_rate = st.number_input("‡§™‡•ç‡§∞‡§§‡§ø ‡§ö‡•å‡§∞‡§∏ ‡§´‡•Ç‡§ü ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§¶‡§∞ (‚Çπ)", value=17500.0, min_value=5000.0)
    avg_flat_size = st.number_input("‡§®‡§µ‡•Ä‡§® ‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§¶‡§®‡§ø‡§ï‡§æ‡§Ç‡§ö‡§æ ‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä ‡§Ü‡§ï‡§æ‡§∞ (‡§ö‡•å‡§∞‡§∏ ‡§´‡•Ç‡§ü)", value=750.0, min_value=200.0)
    
    # Financial Parameters
    st.subheader("‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Æ‡§æ‡§™‡§¶‡§Ç‡§°")
    rent = st.number_input("‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§¶‡§®‡§ø‡§ï‡§æ ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§≠‡§æ‡§°‡•á (‚Çπ)", value=15000.0, min_value=0.0)
    rent_months = st.number_input("‡§≠‡§æ‡§°‡•á ‡§ï‡§æ‡§≤‡§æ‡§µ‡§ß‡•Ä (‡§Æ‡§π‡§ø‡§®‡•á)", value=36, min_value=0, step=1)
    relocation = st.number_input("‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§ñ‡§∞‡•ç‡§ö (‚Çπ)", value=20000.0, min_value=0.0)
    bank_interest = st.number_input("‡§¨‡§Å‡§ï ‡§µ‡•ç‡§Ø‡§æ‡§ú (‚Çπ)", value=50000000.0, min_value=0.0)
    
    # Profit Sharing (if builder redevelopment)
    profit_sharing = 0
    if not is_self_redevelopment:
        profit_sharing = st.number_input(
            "‡§°‡•á‡§µ‡•ç‡§π‡§≤‡§™‡§∞‡§∏‡§π ‡§®‡§´‡§æ ‡§µ‡§æ‡§ü‡§™ (%)", 
            value=30.0,
            min_value=0.0,
            max_value=100.0
        )
    
    # Calculate button
    calculate_button = st.button("‡§®‡§´‡§æ ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡§æ", type="primary")

# Results in the second column
with col2:
    if calculate_button:
        results = calculate_profit(
            # Location parameters
            region=region,
            ready_reckoner_year=ready_reckoner_year,
            
            # Land parameters
            land_area_guntha=land_area_guntha,
            current_carpet_area_per_member=carpet_area,
            total_members=total_members,
            extra_carpet_percentage=extra_percentage,
            
            # Construction parameters
            fsi=fsi,
            fungible_fsi=fungible_fsi,
            construction_cost_per_sqft=construction_cost,
            market_rate_per_sqft=market_rate,
            avg_new_flat_size=avg_flat_size,
            
            # Financial parameters
            rent_per_month=rent,
            rent_duration_months=rent_months,
            relocation_cost_per_member=relocation,
            bank_interest=bank_interest,
            
            # Project type
            project_type=project_type,
            is_self_redevelopment=is_self_redevelopment,
            profit_sharing_with_developer=profit_sharing,
            
            # TDR parameter
            tdr_percentage=tdr_percentage
        )
        
        # Display results in sections
        st.header("‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£")
        
        # Project basics
        st.subheader("‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§Æ‡•Ç‡§≤‡§≠‡•Ç‡§§")
        st.markdown(f"""
        - **‡§™‡•ç‡§∞‡§¶‡•á‡§∂**: {REGION_NAMES[results['region']]}
        - **‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞**: {"‡§®‡§ø‡§µ‡§æ‡§∏‡•Ä" if results['project_type'] == "residential" else "‡§µ‡§æ‡§£‡§ø‡§ú‡•ç‡§Ø‡§ø‡§ï"}
        - **‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞**: {"‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏" if results['is_self_redevelopment'] else "‡§¨‡§ø‡§≤‡•ç‡§°‡§∞ ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏"}
        """)
        
        # Land and area details
        st.subheader("‡§ú‡§Æ‡•Ä‡§® ‡§Ü‡§£‡§ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§§‡§™‡§∂‡•Ä‡§≤")
        st.markdown(f"""
        - **‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞**: {format_area(results['land_area_guntha'], 'Guntha')} ({format_area(results['land_area_sqm'], 'sqm')})
        - **‡§Æ‡•Ç‡§≥ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø**: {results['fsi']}
        - **‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ü‡§ï‡•ç‡§ï‡•á‡§µ‡§æ‡§∞‡•Ä**: {results['tdr_percentage']:.1f}%
        - **‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø (‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§∏‡§π)**: {results['effective_fsi']:.2f}
        - **‡§´‡§Ç‡§ú‡§ø‡§¨‡§≤ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø**: {results['fungible_fsi'] * 100:.1f}%
        - **‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡§æ‡§∞‡•ç‡§™‡•á‡§ü ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞**: {format_area(results['total_current_carpet_area'])}
        - **‡§¶‡•á‡§ä ‡§ï‡•á‡§≤‡•á‡§≤‡•á ‡§ï‡§æ‡§∞‡•ç‡§™‡•á‡§ü ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞**: {format_area(results['total_offered_carpet_area'])}
        - **‡§è‡§ï‡•Ç‡§£ ‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞**: {format_area(results['total_buildable_area_sqft'])}
        - **‡§π‡§∞‡§ø‡§§ ‡§á‡§Æ‡§æ‡§∞‡§§ ‡§¨‡•ã‡§®‡§∏**: {format_area(results['green_bonus'])}
        - **‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§¨‡•ã‡§®‡§∏**: {format_area(results['self_redev_bonus'])}
        - **‡§¨‡•ã‡§®‡§∏‡§∏‡§π ‡§è‡§ï‡•Ç‡§£ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞**: {format_area(results['total_final_area'])}
        - **‡§¨‡§ø‡§≤‡•ç‡§°‡§∞ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞**: {format_area(results['builder_sellable_area'])}
        """)
        
        # Premium calculation
        st.subheader("‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§Ü‡§£‡§ø ‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ó‡§£‡§®‡§æ")
        st.markdown(f"""
        - **‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞**: {format_currency(results['ready_reckoner_rate'])}/sqm
        - **‡§´‡§Ç‡§ú‡§ø‡§¨‡§≤ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø ‡§´‡•Ö‡§ï‡•ç‡§ü‡§∞**: {results['fungible_fsi']:.2f} ({results['fungible_fsi'] * 100:.1f}%)
        - **‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞**: {format_area(results['land_area_sqm'], 'sqm')}
        - **‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ñ‡§∞‡•ç‡§ö ‡§∏‡•Ç‡§§‡•ç‡§∞**: ‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ √ó ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞ √ó ‡§´‡§Ç‡§ú‡§ø‡§¨‡§≤ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø ‡§´‡•Ö‡§ï‡•ç‡§ü‡§∞
        - **‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ñ‡§∞‡•ç‡§ö ‡§ó‡§£‡§®‡§æ**: {format_area(results['land_area_sqm'], 'sqm')} √ó {format_currency(results['ready_reckoner_rate'])}/sqm √ó {results['fungible_fsi']:.2f}
        - **‡§™‡•ç‡§∞‡§§‡§ø ‡§ö‡•å‡§∞‡§∏ ‡§Æ‡•Ä‡§ü‡§∞ ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ñ‡§∞‡•ç‡§ö**: {format_currency(results['premium_cost_per_sqm'])}/sqm
        - **‡§è‡§ï‡•Ç‡§£ ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ñ‡§∞‡•ç‡§ö**: {format_currency(results['premium_cost'])}
        - **‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ñ‡§∞‡•ç‡§ö**: {format_currency(results['tdr_cost'])}
        """)
        
        # Cost analysis
        st.subheader("‡§ñ‡§∞‡•ç‡§ö ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£")
        st.markdown(f"""
        - **‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ñ‡§∞‡•ç‡§ö**: {format_currency(results['premium_cost'])}
        - **‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ñ‡§∞‡•ç‡§ö**: {format_currency(results['tdr_cost'])}
        - **‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§ñ‡§∞‡•ç‡§ö**: {format_currency(results['construction_cost'])} ({format_currency(results['construction_cost_per_sqft'])}/sqft)
        - **‡§ú‡•Ä‡§è‡§∏‡§ü‡•Ä (‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§µ‡§∞ 5%)**: {format_currency(results['gst_cost'])}
        - **‡§Æ‡•Å‡§¶‡•ç‡§∞‡§æ‡§Ç‡§ï ‡§∂‡•Å‡§≤‡•ç‡§ï**: {format_currency(results['stamp_duty_cost'])}
        - **‡§≠‡§æ‡§°‡•á ‡§ñ‡§∞‡•ç‡§ö**: {format_currency(results['rent_cost'])}
        - **‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§ñ‡§∞‡•ç‡§ö**: {format_currency(results['relocation_cost'])}
        - **‡§¨‡§Å‡§ï ‡§µ‡•ç‡§Ø‡§æ‡§ú**: {format_currency(results['bank_interest'])}
        - **‡§è‡§ï‡•Ç‡§£ ‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§ñ‡§∞‡•ç‡§ö**: {format_currency(results['total_cost'])}
        """)
        
        # Revenue and profit/loss
        if results['total_profit'] >= 0:
            st.subheader("‡§Æ‡§π‡§∏‡•Ç‡§≤ ‡§Ü‡§£‡§ø ‡§®‡§´‡§æ")
        else:
            st.subheader("‡§Æ‡§π‡§∏‡•Ç‡§≤ ‡§Ü‡§£‡§ø ‡§§‡•ã‡§ü‡§æ")
            
        st.markdown(f"""
        - **‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§¶‡§∞**: {format_currency(results['market_rate_per_sqft'])}/sqft
        - **‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø**: {format_currency(results['project_value'])}
        - **‡§è‡§ï‡•Ç‡§£ {"‡§®‡§´‡§æ" if results['total_profit'] >= 0 else "‡§§‡•ã‡§ü‡§æ"}**: {format_currency(abs(results['total_profit']))}
        """)
        
        # Profit/Loss distribution
        if results['total_profit'] >= 0:
            st.subheader("‡§®‡§´‡§æ ‡§µ‡§ø‡§§‡§∞‡§£")
        else:
            st.subheader("‡§§‡•ã‡§ü‡§æ ‡§µ‡§ø‡§§‡§∞‡§£")
            
        if results['total_profit'] >= 0:
            # Profit scenario
            if results['is_self_redevelopment']:
                st.markdown(f"""
                - **‡§∏‡•ã‡§∏‡§æ‡§Ø‡§ü‡•Ä ‡§®‡§´‡§æ**: {format_currency(results['society_profit'])}
                - **‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§®‡§´‡§æ**: {format_currency(results['per_member_profit'])}
                """)
            else:
                st.markdown(f"""
                - **‡§°‡•á‡§µ‡•ç‡§π‡§≤‡§™‡§∞ ‡§®‡§´‡§æ ({results['profit_sharing_percentage']}%)**: {format_currency(results['developer_profit'])}
                - **‡§∏‡•ã‡§∏‡§æ‡§Ø‡§ü‡•Ä ‡§®‡§´‡§æ**: {format_currency(results['society_profit'])}
                - **‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§®‡§´‡§æ**: {format_currency(results['per_member_profit'])}
                """)
        else:
            # Loss scenario
            if results['is_self_redevelopment']:
                st.markdown(f"""
                - **‡§∏‡•ã‡§∏‡§æ‡§Ø‡§ü‡•Ä ‡§§‡•ã‡§ü‡§æ**: {format_currency(abs(results['society_profit']))}
                - **‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§§‡•ã‡§ü‡§æ**: {format_currency(abs(results['per_member_profit']))}
                """)
            else:
                st.markdown(f"""
                - **‡§°‡•á‡§µ‡•ç‡§π‡§≤‡§™‡§∞ ‡§§‡•ã‡§ü‡§æ ({results['profit_sharing_percentage']}%)**: {format_currency(abs(results['developer_profit']))}
                - **‡§∏‡•ã‡§∏‡§æ‡§Ø‡§ü‡•Ä ‡§§‡•ã‡§ü‡§æ**: {format_currency(abs(results['society_profit']))}
                - **‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§§‡•ã‡§ü‡§æ**: {format_currency(abs(results['per_member_profit']))}
                """)
        
        # Salable flats
        st.subheader("‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§¶‡§®‡§ø‡§ï‡§æ")
        st.markdown(f"""
        - **‡§∏‡§Ç‡§≠‡§æ‡§µ‡•ç‡§Ø ‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§¶‡§®‡§ø‡§ï‡§æ‡§Ç‡§ö‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ**: {results['num_salable_flats']:.1f}
        """)
        
        # Add a download button for the report
        st.download_button(
            label="‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§Æ‡§ú‡§ï‡•Ç‡§∞ ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ",
            data=f"""
‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£
==================================================

‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§Æ‡•Ç‡§≤‡§≠‡•Ç‡§§:
--------------
‡§™‡•ç‡§∞‡§¶‡•á‡§∂: {REGION_NAMES[results['region']]}
‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞: {"‡§®‡§ø‡§µ‡§æ‡§∏‡•Ä" if results['project_type'] == "residential" else "‡§µ‡§æ‡§£‡§ø‡§ú‡•ç‡§Ø‡§ø‡§ï"}
‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞: {"‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏" if results['is_self_redevelopment'] else "‡§¨‡§ø‡§≤‡•ç‡§°‡§∞ ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏"}

‡§ú‡§Æ‡•Ä‡§® ‡§Ü‡§£‡§ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§§‡§™‡§∂‡•Ä‡§≤:
------------------
‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: {format_area(results['land_area_guntha'], 'Guntha')} ({format_area(results['land_area_sqm'], 'sqm')})
‡§Æ‡•Ç‡§≥ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø: {results['fsi']}
‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ü‡§ï‡•ç‡§ï‡•á‡§µ‡§æ‡§∞‡•Ä: {results['tdr_percentage']:.1f}%
‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø (‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§∏‡§π): {results['effective_fsi']:.2f}
‡§´‡§Ç‡§ú‡§ø‡§¨‡§≤ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø: {results['fungible_fsi'] * 100:.1f}%
‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡§æ‡§∞‡•ç‡§™‡•á‡§ü ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: {format_area(results['total_current_carpet_area'])}
‡§¶‡•á‡§ä ‡§ï‡•á‡§≤‡•á‡§≤‡•á ‡§ï‡§æ‡§∞‡•ç‡§™‡•á‡§ü ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: {format_area(results['total_offered_carpet_area'])}
‡§è‡§ï‡•Ç‡§£ ‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: {format_area(results['total_buildable_area_sqft'])}
‡§π‡§∞‡§ø‡§§ ‡§á‡§Æ‡§æ‡§∞‡§§ ‡§¨‡•ã‡§®‡§∏: {format_area(results['green_bonus'])}
‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§¨‡•ã‡§®‡§∏: {format_area(results['self_redev_bonus'])}
‡§¨‡•ã‡§®‡§∏‡§∏‡§π ‡§è‡§ï‡•Ç‡§£ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: {format_area(results['total_final_area'])}
‡§¨‡§ø‡§≤‡•ç‡§°‡§∞ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: {format_area(results['builder_sellable_area'])}

‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§Ü‡§£‡§ø ‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ó‡§£‡§®‡§æ:
-----------------
‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞: {format_currency(results['ready_reckoner_rate'])}/sqm
‡§´‡§Ç‡§ú‡§ø‡§¨‡§≤ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø ‡§´‡•Ö‡§ï‡•ç‡§ü‡§∞: {results['fungible_fsi']:.2f} ({results['fungible_fsi'] * 100:.1f}%)
‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: {format_area(results['land_area_sqm'], 'sqm')}
‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ñ‡§∞‡•ç‡§ö ‡§∏‡•Ç‡§§‡•ç‡§∞: ‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ √ó ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞ √ó ‡§´‡§Ç‡§ú‡§ø‡§¨‡§≤ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø ‡§´‡•Ö‡§ï‡•ç‡§ü‡§∞
‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ñ‡§∞‡•ç‡§ö: {format_currency(results['premium_cost'])}
‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ñ‡§∞‡•ç‡§ö: {format_currency(results['tdr_cost'])}

‡§ñ‡§∞‡•ç‡§ö ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£:
------------
‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ñ‡§∞‡•ç‡§ö: {format_currency(results['premium_cost'])}
‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ñ‡§∞‡•ç‡§ö: {format_currency(results['tdr_cost'])}
‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§ñ‡§∞‡•ç‡§ö: {format_currency(results['construction_cost'])} ({format_currency(results['construction_cost_per_sqft'])}/sqft)
‡§ú‡•Ä‡§è‡§∏‡§ü‡•Ä (‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ‡§æ‡§µ‡§∞ 5%): {format_currency(results['gst_cost'])}
‡§Æ‡•Å‡§¶‡•ç‡§∞‡§æ‡§Ç‡§ï ‡§∂‡•Å‡§≤‡•ç‡§ï: {format_currency(results['stamp_duty_cost'])}
‡§≠‡§æ‡§°‡•á ‡§ñ‡§∞‡•ç‡§ö: {format_currency(results['rent_cost'])}
‡§∏‡•ç‡§•‡§≤‡§æ‡§Ç‡§§‡§∞ ‡§ñ‡§∞‡•ç‡§ö: {format_currency(results['relocation_cost'])}
‡§¨‡§Å‡§ï ‡§µ‡•ç‡§Ø‡§æ‡§ú: {format_currency(results['bank_interest'])}
‡§è‡§ï‡•Ç‡§£ ‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§ñ‡§∞‡•ç‡§ö: {format_currency(results['total_cost'])}

‡§Æ‡§π‡§∏‡•Ç‡§≤ ‡§Ü‡§£‡§ø {"‡§®‡§´‡§æ" if results['total_profit'] >= 0 else "‡§§‡•ã‡§ü‡§æ"}:
--------------
‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§¶‡§∞: {format_currency(results['market_rate_per_sqft'])}/sqft
‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø: {format_currency(results['project_value'])}
‡§è‡§ï‡•Ç‡§£ {"‡§®‡§´‡§æ" if results['total_profit'] >= 0 else "‡§§‡•ã‡§ü‡§æ"}: {format_currency(abs(results['total_profit']))}

{"‡§®‡§´‡§æ" if results['total_profit'] >= 0 else "‡§§‡•ã‡§ü‡§æ"} ‡§µ‡§ø‡§§‡§∞‡§£:
-----------------
{"‡§∏‡•ã‡§∏‡§æ‡§Ø‡§ü‡•Ä " + ("‡§®‡§´‡§æ" if results['society_profit'] >= 0 else "‡§§‡•ã‡§ü‡§æ") + ": " + format_currency(abs(results['society_profit']))}
{"‡§°‡•á‡§µ‡•ç‡§π‡§≤‡§™‡§∞ " + ("‡§®‡§´‡§æ" if results['developer_profit'] >= 0 else "‡§§‡•ã‡§ü‡§æ") + " (" + str(results['profit_sharing_percentage']) + "%): " + format_currency(abs(results['developer_profit'])) if not results['is_self_redevelopment'] else ""}
‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§¶‡§∏‡•ç‡§Ø {"‡§®‡§´‡§æ" if results['per_member_profit'] >= 0 else "‡§§‡•ã‡§ü‡§æ"}: {format_currency(abs(results['per_member_profit']))}

‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§¶‡§®‡§ø‡§ï‡§æ:
-----------
‡§∏‡§Ç‡§≠‡§æ‡§µ‡•ç‡§Ø ‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§¶‡§®‡§ø‡§ï‡§æ‡§Ç‡§ö‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ: {results['num_salable_flats']:.1f}
            """,
            file_name="punarvikƒÅs_ahavƒÅl.txt",
            mime="text/plain",
        )
        
        # Add visualization section - with ENGLISH labels for the charts
        st.subheader("‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™ ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡•ç‡§π‡§ø‡§ú‡•ç‡§Ø‡•Å‡§Ö‡§≤‡§æ‡§Ø‡§ù‡•á‡§∂‡§®")
        
        # Create tabs for different visualizations
        viz_tab1, viz_tab2 = st.tabs(["‡§ñ‡§∞‡•ç‡§ö ‡§µ‡§ø‡§≠‡§æ‡§ú‡§®", "‡§®‡§´‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£"])
        
        with viz_tab1:
            # Cost breakdown pie chart - using English labels
            cost_labels = [
                'Premium Cost', 
                'TDR Cost', 
                'Construction Cost', 
                'GST', 
                'Stamp Duty', 
                'Rent Cost', 
                'Relocation Cost', 
                'Bank Interest'
            ]
            cost_values = [
                results['premium_cost'],
                results['tdr_cost'],
                results['construction_cost'],
                results['gst_cost'],
                results['stamp_duty_cost'],
                results['rent_cost'],
                results['relocation_cost'],
                results['bank_interest']
            ]
            
            # Filter out zero values for better visualization
            filtered_labels = [label for label, value in zip(cost_labels, cost_values) if value > 0]
            filtered_values = [value for value in cost_values if value > 0]
            
            fig1, ax1 = plt.subplots(figsize=(10, 6))
            ax1.pie(filtered_values, labels=filtered_labels, autopct='%1.1f%%', startangle=90)
            ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
            plt.title('Cost Breakdown')  # English title
            st.pyplot(fig1)
        
        with viz_tab2:
            # Check if project is profitable or in loss
            is_profitable = results['total_profit'] >= 0
            
            # Profit and area allocation
            fig2, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
            
            # Area allocation - using English labels
            area_labels = ['Society Area', 'Sellable Area']
            area_values = [
                results['total_offered_carpet_area'],
                results['builder_sellable_area']
            ]
            ax1.bar(area_labels, area_values, color=['#3498db', '#2ecc71'])
            ax1.set_ylabel('Square Feet')
            ax1.set_title('Area Allocation')
            
            # For profit/loss distribution visualization - using English labels
            if is_profitable:
                # Handle profit scenario
                if not results['is_self_redevelopment']:
                    # Builder redevelopment with profit
                    profit_labels = ['Developer Profit', 'Society Profit']
                    profit_values = [
                        max(0, results['developer_profit']),  # Ensure positive values
                        max(0, results['society_profit'])     # Ensure positive values
                    ]
                    # Only create pie chart if we have positive values
                    if all(v > 0 for v in profit_values):
                        ax2.pie(profit_values, labels=profit_labels, autopct='%1.1f%%', startangle=90, colors=['#e74c3c', '#3498db'])
                        ax2.axis('equal')
                        ax2.set_title('Profit Distribution')
                    else:
                        # Fallback to bar chart if any value is not positive
                        ax2.bar(profit_labels, profit_values, color=['#e74c3c', '#3498db'])
                        ax2.set_ylabel('Profit Amount (‚Çπ)')
                        ax2.set_title('Profit Distribution')
                else:
                    # For self-redevelopment with profit - compare cost vs project value with bar chart
                    ax2.bar(['Total Cost', 'Project Value'], 
                          [results['total_cost'], results['project_value']], 
                          color=['#e74c3c', '#3498db'])
                    ax2.set_ylabel('Amount (‚Çπ)')
                    ax2.set_title('Cost vs. Project Value')
            else:
                # Handle loss scenario with a bar chart
                if not results['is_self_redevelopment']:
                    # Builder redevelopment with loss
                    loss_labels = ['Developer Loss', 'Society Loss']
                    loss_values = [
                        abs(results['developer_profit']),
                        abs(results['society_profit'])
                    ]
                    ax2.bar(loss_labels, loss_values, color=['#e74c3c', '#3498db'])
                    ax2.set_ylabel('Loss Amount (‚Çπ)')
                    ax2.set_title('Loss Distribution')
                else:
                    # Self-redevelopment with loss - show cost vs value comparison
                    ax2.bar(['Total Cost', 'Project Value'], 
                          [results['total_cost'], results['project_value']], 
                          color=['#e74c3c', '#3498db'])
                    ax2.set_ylabel('Amount (‚Çπ)')
                    ax2.set_title('Cost vs. Project Value (Loss Scenario)')
            
            plt.tight_layout()
            st.pyplot(fig2)

# Add documentation section
st.markdown("---")

# Premium & TDR calculation documentation
with st.expander("‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§æ‡§§‡•Ä‡§≤ ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§Ü‡§£‡§ø ‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ó‡§£‡§®‡•á‡§¨‡§¶‡•ç‡§¶‡§≤"):
    st.markdown("""
    ## ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§æ‡§§‡•Ä‡§≤ ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏‡§æ‡§∏‡§æ‡§†‡•Ä ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§Ü‡§£‡§ø ‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ó‡§£‡§®‡§æ ‡§∏‡§Æ‡§ú‡•Ç‡§® ‡§ò‡•á‡§£‡•á

    1. **‡§®‡§ø‡§Ø‡§æ‡§Æ‡§ï ‡§Ü‡§ß‡§æ‡§∞**
       ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡§æ‡§§‡•Ä‡§≤ ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§Ü‡§£‡§ø ‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ó‡§£‡§®‡§æ ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§™‡•ç‡§∞‡§æ‡§¶‡•á‡§∂‡§ø‡§ï ‡§Ü‡§£‡§ø ‡§®‡§ó‡§∞‡§∞‡§ö‡§®‡§æ ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ ‡§Ü‡§£‡§ø ‡§§‡•ç‡§Ø‡§æ‡§®‡§Ç‡§§‡§∞‡§ö‡•ç‡§Ø‡§æ ‡§∂‡§æ‡§∏‡§® ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø‡§æ‡§Ç‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§Ü‡§π‡•á.
       
    2. **‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§∏‡•Ç‡§§‡•ç‡§∞ ‡§ò‡§ü‡§ï**
       ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ñ‡§∞‡•ç‡§ö = ‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§ö‡•å‡§∞‡§∏ ‡§Æ‡•Ä‡§ü‡§∞) √ó ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞ (‚Çπ/‡§ö‡•å‡§∞‡§∏ ‡§Æ‡•Ä‡§ü‡§∞) √ó ‡§´‡§Ç‡§ú‡§ø‡§¨‡§≤ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø ‡§´‡•Ö‡§ï‡•ç‡§ü‡§∞
       
       ‡§ú‡•á‡§•‡•á:
       - ‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: ‡§ö‡•å‡§∞‡§∏ ‡§Æ‡•Ä‡§ü‡§∞‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§è‡§ï‡•Ç‡§£ ‡§≠‡•Ç‡§ñ‡§Ç‡§° ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞
       - ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞: ‡§∏‡§∞‡§ï‡§æ‡§∞-‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§ø‡§§ ‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§¶‡§∞ (‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§Ö‡§¶‡•ç‡§Ø‡§§‡§®‡§ø‡§§)
       - ‡§´‡§Ç‡§ú‡§ø‡§¨‡§≤ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø ‡§´‡•Ö‡§ï‡•ç‡§ü‡§∞: ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§ó‡•Å‡§£‡§ï (‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø‡§§‡§É 0.25-0.40)
    
    3. **‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ (‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡§æ‡§Ç‡§ö‡•á ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£)**
       ‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§è‡§ï‡§æ ‡§≠‡•Ç‡§ñ‡§Ç‡§°‡§æ‡§µ‡§∞‡•Ç‡§® ‡§¶‡•Å‡§∏‡§±‡•ç‡§Ø‡§æ ‡§≠‡•Ç‡§ñ‡§Ç‡§°‡§æ‡§µ‡§∞ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§ø‡§§ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡•Ä ‡§¶‡•á‡§§‡•á.
       
       - ‡§™‡•ç‡§∞‡§æ‡§¶‡•á‡§∂‡§ø‡§ï ‡§ó‡•Å‡§£‡§ï‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø ‡§µ‡§æ‡§¢‡§µ‡§§‡•á
       - ‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ñ‡§∞‡•ç‡§ö ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§ü‡§ï‡•ç‡§ï‡•á‡§µ‡§æ‡§∞‡•Ä‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ó‡§£‡§®‡§æ ‡§ï‡•á‡§≤‡•Ä ‡§ú‡§æ‡§§‡•á
       - ‡§µ‡•á‡§ó‡§µ‡•á‡§ó‡§≥‡•ç‡§Ø‡§æ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂‡§æ‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§µ‡•á‡§ó‡§µ‡•á‡§ó‡§≥‡•á ‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§ó‡•Å‡§£‡§ï ‡§Ü‡§£‡§ø ‡§¶‡§∞ ‡§Ü‡§π‡•á‡§§
       - ‡§ü‡•Ä‡§°‡•Ä‡§Ü‡§∞ ‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§£‡•Ä‡§Ø‡§∞‡§ø‡§§‡•ç‡§Ø‡§æ ‡§µ‡§æ‡§¢‡§µ‡•Ç ‡§∂‡§ï‡§§‡•ã ‡§Ü‡§£‡§ø ‡§¨‡§π‡•Å‡§§‡•á‡§ï‡§¶‡§æ ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§ï‡§ø‡§´‡§æ‡§Ø‡§§‡§∂‡•Ä‡§∞ ‡§Ö‡§∏‡§§‡•ã
       
    4. **‡§ú‡•Ä‡§è‡§∏‡§ü‡•Ä ‡§Ü‡§£‡§ø ‡§Æ‡•Å‡§¶‡•ç‡§∞‡§æ‡§Ç‡§ï ‡§∂‡•Å‡§≤‡•ç‡§ï ‡§µ‡§ø‡§ö‡§æ‡§∞**
       - **‡§¨‡§ø‡§≤‡•ç‡§°‡§∞ ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏‡§æ‡§∏‡§æ‡§†‡•Ä**: 
         - ‡§ú‡•Ä‡§è‡§∏‡§ü‡•Ä: ‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§ñ‡§∞‡•ç‡§ö‡§æ‡§µ‡§∞ 5%
         - ‡§Æ‡•Å‡§¶‡•ç‡§∞‡§æ‡§Ç‡§ï ‡§∂‡•Å‡§≤‡•ç‡§ï: ‡§ï‡§∞‡§æ‡§∞‡§®‡§æ‡§Æ‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§ö‡•á 5-6% (‡§™‡•ç‡§∞‡§¶‡•á‡§∂‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§µ‡•á‡§ó‡§µ‡•á‡§ó‡§≥‡•á)
       - **‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§ø‡§ï‡§æ‡§∏‡§æ‡§∏‡§æ‡§†‡•Ä**:
         - ‡§ú‡•Ä‡§è‡§∏‡§ü‡•Ä: 0% (‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§∏‡§π‡§≠‡§æ‡§ó‡•Ä ‡§®‡§æ‡§π‡•Ä)
         - ‡§Æ‡•Å‡§¶‡•ç‡§∞‡§æ‡§Ç‡§ï ‡§∂‡•Å‡§≤‡•ç‡§ï: ‡§™‡•ç‡§∞‡§§‡§ø ‡§Ø‡•Å‡§®‡§ø‡§ü ‚Çπ1,000 ‡§´‡•ç‡§≤‡•Ö‡§ü
    
    5. **‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞**
       - ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä ‡§Ü‡§£‡§ø ‡§Æ‡•Å‡§¶‡•ç‡§∞‡§æ‡§Ç‡§ï ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ï‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡§π‡§æ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§ï‡§æ‡§¶‡•ç‡§µ‡§æ‡§∞‡•á ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§ø‡§§
       - ‡§≠‡§æ‡§ó‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ü‡§£‡§ø ‡§∞‡§∏‡•ç‡§§‡•ç‡§Ø‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¨‡§¶‡§≤‡§§‡•á
       - ‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§ï‡§ø‡§Æ‡§æ‡§® ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§¶‡§∞‡•ç‡§∂‡§µ‡§§‡•á
       
    6. **‡§´‡§Ç‡§ú‡§ø‡§¨‡§≤ ‡§è‡§´‡§è‡§∏‡§Ü‡§Ø ‡§´‡•Ö‡§ï‡•ç‡§ü‡§∞**
       - ‡§Æ‡•Å‡§Ç‡§¨‡§à: 0.35 (35% ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞‡§æ‡§ö‡•á)
       - ‡§®‡§µ‡•Ä ‡§Æ‡•Å‡§Ç‡§¨‡§à: 0.33 (33% ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞‡§æ‡§ö‡•á)
       - ‡§†‡§æ‡§£‡•á: 0.30 (30% ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞‡§æ‡§ö‡•á)
       - ‡§™‡•Å‡§£‡•á: 0.28 (28% ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞‡§æ‡§ö‡•á)
       - ‡§®‡§æ‡§ó‡§™‡•Ç‡§∞: 0.25 (25% ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞‡§æ‡§ö‡•á)
       - ‡§®‡§æ‡§∂‡§ø‡§ï: 0.26 (26% ‡§∞‡•á‡§°‡•Ä ‡§∞‡•á‡§ï‡§®‡§∞ ‡§¶‡§∞‡§æ‡§ö‡•á)
    """)
